import pandas as pd
import oracledb
import streamlit as st
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import numpy as np
import traceback
import sys
import time # Importar a biblioteca time para a auto-atualiza√ß√£o

# Configura√ß√£o da p√°gina do Streamlit
st.set_page_config(
    page_title="Painel de Ordens de Servi√ßo",
    page_icon="üîß",
    layout="wide"
)

# Configura√ß√£o do Banco de Dados Oracle
# ATEN√á√ÉO: Substitua os valores abaixo com as suas credenciais reais e informa√ß√µes do banco
USERNAME = 'TASY'
PASSWORD = 'aloisk'
HOST = '10.250.250.190'
PORT = 1521
SERVICE = 'dbprod.santacasapc'

# Inicializa o cliente Oracle Instant Client
try:
    oracledb.init_oracle_client()
except Exception as e:
    st.sidebar.error(f"Erro na inicializa√ß√£o do Oracle Instant Client: {e}")
    st.sidebar.info("Certifique-se de que o Oracle Instant Client est√° instalado e configurado corretamente no seu sistema.")

# Fun√ß√£o para conectar ao banco de dados Oracle
@st.cache(allow_output_mutation=True, suppress_st_warning=True)
def conectar_ao_banco():
    """Estabelece uma conex√£o direta com o banco de dados Oracle usando oracledb."""
    try:
        # Tentativa 1: Usando DSN com formato padr√£o
        conn = oracledb.connect(user=USERNAME, password=PASSWORD, 
                               dsn=f"{HOST}:{PORT}/{SERVICE}")
        return conn
    except Exception as e:
        try:
            # Tentativa 2: Usando formato de conex√£o EZ
            dsn = f"(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST={HOST})(PORT={PORT}))(CONNECT_DATA=(SERVICE_NAME={SERVICE})))"
            conn = oracledb.connect(user=USERNAME, password=PASSWORD, dsn=dsn)
            return conn
        except Exception as e2:
            st.error(f"Erro ao conectar ao banco de dados: {e2}")
            st.error("Verifique as credenciais, o endere√ßo do servidor e se o servi√ßo do banco de dados est√° ativo.")
            return None

# Fun√ß√£o para obter dados das ordens de servi√ßo
# Adicionamos 'refresh_key' para for√ßar a atualiza√ß√£o a cada 30 segundos
@st.cache(allow_output_mutation=True, suppress_st_warning=True, hash_funcs={oracledb.Connection: lambda _: None})
def obter_ordens_servico(conn, refresh_key): # <-- Adicionado refresh_key
    """Obt√©m os dados das ordens de servi√ßo do grupo de trabalho 12."""
    if conn is None:
        return pd.DataFrame() 
    try:
        query = """
        select  nr_sequencia as nr_os, 
                ds_dano_breve as ds_solicitacao, 
                obter_nome_pf(cd_pessoa_solicitante) as nm_solicitante, 
                ie_prioridade,
                dt_ordem_servico as dt_criacao, 
                dt_inicio_real as dt_inicio, 
                dt_fim_real as dt_termino, 
                nm_usuario as nm_responsavel, 
                dt_atualizacao as dt_ultima_atualizacao, 
                ds_dano as ds_completa_servico
        from    MAN_ORDEM_SERVICO 
        where   NR_GRUPO_TRABALHO = 12
        """
        
        df = pd.read_sql(query, conn)
        return df
    except Exception as e:
        st.error(f"Erro ao executar consulta: {e}")
        st.error("Verifique a query SQL ou se o banco de dados est√° acess√≠vel e a tabela MAN_ORDEM_SERVICO existe.")
        return pd.DataFrame()

# Fun√ß√£o para processar e enriquecer os dados
def processar_dados(df):
    """Processa os dados para an√°lise e visualiza√ß√£o."""
    if df.empty:
        return df

    df.columns = [col.lower() for col in df.columns]
    
    colunas_data = ['dt_criacao', 'dt_inicio', 'dt_termino', 'dt_ultima_atualizacao']
    for col in colunas_data:
        if col in df.columns:
            df[col] = pd.to_datetime(df[col], errors='coerce')
    
    # Criar coluna de status
    # Baseado na sua nova l√≥gica:
    # 'Em aberto' (Aguarda In√≠cio) = dt_inicio IS NULL AND dt_fim IS NULL
    # 'Em andamento' (Ativa) = dt_inicio IS NOT NULL AND dt_fim IS NULL
    # 'Conclu√≠da' = dt_fim IS NOT NULL
    df['status'] = 'Conclu√≠da' # Default para ser sobrescrito
    df.loc[df['dt_inicio'].isna() & df['dt_termino'].isna(), 'status'] = 'Em aberto'
    df.loc[df['dt_inicio'].notna() & df['dt_termino'].isna(), 'status'] = 'Em andamento'
    
    df['tempo_atendimento'] = np.nan
    mask_atendimento = (df['dt_termino'].notna()) & (df['dt_criacao'].notna())
    df.loc[mask_atendimento, 'tempo_atendimento'] = \
        (df.loc[mask_atendimento, 'dt_termino'] - df.loc[mask_atendimento, 'dt_criacao']).dt.total_seconds() / (24*60*60)
    
    df['tempo_espera'] = np.nan
    mask_espera = (df['dt_inicio'].notna()) & (df['dt_criacao'].notna())
    df.loc[mask_espera, 'tempo_espera'] = \
        (df.loc[mask_espera, 'dt_inicio'] - df.loc[mask_espera, 'dt_criacao']).dt.total_seconds() / (24*60*60)
    
    return df

# Fun√ß√£o para exibir o Painel de Acompanhamento (aba dedicada)
def exibir_painel_acompanhamento(df_filtrado):
    st.subheader("Ordens de Servi√ßo Abertas e Aguardando In√≠cio")
    st.write(
        "Esta se√ß√£o lista as Ordens de Servi√ßo que ainda n√£o foram iniciadas (`dt_inicio` √© nulo) e n√£o foram conclu√≠das (`dt_termino` √© nulo). "
        "Elas est√£o ordenadas da mais antiga para a mais recente, ajudando a identificar itens que podem estar parados, independentemente de terem um respons√°vel atribu√≠do."
    )
    
    # Filtra as OS que est√£o 'Em aberto' (Aguardando In√≠cio)
    os_aguardando_inicio = df_filtrado[
        df_filtrado["status"] == "Em aberto" 
    ].copy() 

    # Ordena pela data de cria√ß√£o, da mais antiga para a mais nova
    os_aguardando_inicio = os_aguardando_inicio.sort_values(by="dt_criacao", ascending=True)

    if not os_aguardando_inicio.empty:
        # Exibe uma mensagem de sucesso com a contagem
        st.success(f"Foram encontradas **{len(os_aguardando_inicio)}** Ordens de Servi√ßo abertas e aguardando in√≠cio.")
        # Exibe o dataframe
        st.dataframe(os_aguardando_inicio[[
            'nr_os', 'ds_solicitacao', 'nm_solicitante', 'ie_prioridade', 'dt_criacao', 'nm_responsavel'
        ]].rename(columns={
            'nr_os': 'N¬∫ OS', 
            'ds_solicitacao': 'Solicita√ß√£o', 
            'nm_solicitante': 'Solicitante',
            'ie_prioridade': 'Prioridade', 
            'dt_criacao': 'Data Cria√ß√£o',
            'nm_responsavel': 'Respons√°vel Atual' 
        })) # use_container_width removido para compatibilidade
    else:
        st.info("üéâ Nenhuma Ordem de Servi√ßo aberta aguardando in√≠cio no per√≠odo selecionado! Bom trabalho!")
        
    st.markdown("---") # Separador visual
    
    st.subheader("Carga de Trabalho de Ordens de Servi√ßo Ativas por Respons√°vel")
    st.write("Aqui voc√™ pode visualizar a quantidade de Ordens de Servi√ßo que est√£o **ativas (j√° iniciadas e ainda n√£o conclu√≠das)** para cada t√©cnico.")

    # Filtra as OS que est√£o 'Em andamento' (Ativas)
    # E que possuem um respons√°vel (nm_responsavel IS NOT NULL)
    os_em_andamento_ativas = df_filtrado[
        (df_filtrado["status"] == "Em andamento") & 
        (df_filtrado["nm_responsavel"].notna()) 
    ].copy()
    
    if not os_em_andamento_ativas.empty:
        # Conta a quantidade de OS ativas por respons√°vel
        carga_por_responsavel = os_em_andamento_ativas["nm_responsavel"].value_counts().reset_index()
        carga_por_responsavel.columns = ["Respons√°vel", "OS Ativas"]
        
        # Define o n√∫mero de colunas para os cards (m√°ximo de 3 para melhor visualiza√ß√£o)
        num_responsaveis = len(carga_por_responsavel)
        num_colunas = min(3, num_responsaveis if num_responsaveis > 0 else 1) 
        cols = st.columns(num_colunas) # Usa 'cols' como vari√°vel para as colunas

        for idx, row in carga_por_responsavel.iterrows():
            with cols[idx % num_colunas]: # Distribui os cart√µes entre as colunas
                # Usando st.info para dar cor azul ao card, conforme solicitado
                st.info( 
                    f"**{row['Respons√°vel']}**\n\n"
                    f"OS Ativas: **{int(row['OS Ativas'])}**"
                )
    else:
        st.info("Nenhuma Ordem de Servi√ßo ativa atribu√≠da a um respons√°vel no per√≠odo selecionado.")


# Fun√ß√£o principal do aplicativo Streamlit
def main():
    # Inicializa o estado da sess√£o para a visualiza√ß√£o selecionada
    if 'selected_view' not in st.session_state:
        st.session_state.selected_view = "Painel de Acompanhamento" # Define o painel de acompanhamento como padr√£o
    
    # Loop infinito para auto-atualiza√ß√£o do dashboard
    while True: 
        # Usamos st.empty() para "limpar" o conte√∫do anterior e redesenh√°-lo completamente
        placeholder_content = st.empty()
        with placeholder_content.container():

            st.title("üîß Painel de Acompanhamento de Ordens de Servi√ßo")
            
            # --- Sidebar para Navega√ß√£o ---
            st.sidebar.header("Navega√ß√£o do Painel")
            # Bot√µes na sidebar para alternar entre as visualiza√ß√µes
            if st.sidebar.button("Status e Prioridade", key="btn_status_prioridade"):
                st.session_state.selected_view = "Status e Prioridade"
            if st.sidebar.button("Tempo de Atendimento", key="btn_tempo_atendimento"):
                st.session_state.selected_view = "Tempo de Atendimento"
            if st.sidebar.button("Solicitantes", key="btn_solicitantes"):
                st.session_state.selected_view = "Solicitantes"
            if st.sidebar.button("Painel de Acompanhamento", key="btn_painel_acompanhamento"):
                st.session_state.selected_view = "Painel de Acompanhamento"
            
            st.sidebar.markdown("---") # Separador visual na sidebar
            # --- Fim da Navega√ß√£o da Sidebar ---

            # Conectar ao banco de dados
            with st.spinner("Conectando ao banco de dados..."):
                conn = conectar_ao_banco()
                
            if conn is None:
                st.error("N√£o foi poss√≠vel estabelecer conex√£o com o banco de dados. O painel n√£o poder√° exibir dados.")
                time.sleep(30) # Espera 30 segundos antes de tentar novamente
                continue # Volta para o in√≠cio do loop (tenta reconectar)

            # Obter dados das Ordens de Servi√ßo
            # A chave de atualiza√ß√£o (time.time() // 30) for√ßa o Streamlit a re-executar
            # a fun√ß√£o `obter_ordens_servico` a cada 30 segundos, ignorando o cache
            with st.spinner("Carregando dados das ordens de servi√ßo..."):
                df_os = obter_ordens_servico(conn, time.time() // 30) 
                
            if df_os.empty:
                st.warning("N√£o foram encontradas ordens de servi√ßo para o grupo de trabalho 12 ou houve um erro na consulta.")
                st.info("Verifique se o grupo de trabalho '12' possui dados ou se a query SQL est√° correta.")
                time.sleep(30) # Espera 30 segundos antes de tentar novamente
                continue # Volta para o in√≠cio do loop

            # Processar dados obtidos
            df_os = processar_dados(df_os)
            
            # Sidebar para filtros de dados
            st.sidebar.header("Filtros de Dados")
            
            # Filtro de per√≠odo por data de cria√ß√£o
            st.sidebar.subheader("Per√≠odo de Cria√ß√£o da OS")
            min_date_available = df_os['dt_criacao'].min().date() if not df_os['dt_criacao'].isna().all() else datetime.now().date() - timedelta(days=90)
            max_date_available = df_os['dt_criacao'].max().date() if not df_os['dt_criacao'].isna().all() else datetime.now().date()
            
            data_inicio_input = st.sidebar.date_input("Data Inicial", min_date_available, 
                                                       min_value=min_date_available, max_value=max_date_available)
            data_fim_input = st.sidebar.date_input("Data Final", max_date_available, 
                                                    min_value=min_date_available, max_value=max_date_available)
            
            if data_inicio_input > data_fim_input:
                st.sidebar.error("A Data Inicial n√£o pode ser maior que a Data Final.")
                df_filtrado = pd.DataFrame() # Esvazia o DataFrame para indicar erro
            else:
                df_filtrado = df_os[(df_os['dt_criacao'].dt.date >= data_inicio_input) & 
                                        (df_os['dt_criacao'].dt.date <= data_fim_input)].copy()
            
            if df_filtrado.empty:
                st.warning("N√£o h√° dados para o per√≠odo de cria√ß√£o selecionado. Ajuste o filtro de datas.")
                time.sleep(30)
                continue
                
            st.sidebar.markdown("---") # Separador visual

            # Filtros adicionais para status e prioridade
            st.sidebar.subheader("Filtros Adicionais")
            status_options = ['Todos'] + sorted(df_filtrado['status'].unique().tolist())
            status_selecionado = st.sidebar.selectbox("Status", status_options)
            
            prioridade_options = ['Todas'] + sorted(df_filtrado['ie_prioridade'].unique().tolist())
            prioridade_selecionada = st.sidebar.selectbox("Prioridade", prioridade_options)
            
            if status_selecionado != 'Todos':
                df_filtrado = df_filtrado[df_filtrado['status'] == status_selecionado]
            
            if prioridade_selecionada != 'Todas':
                df_filtrado = df_filtrado[df_filtrado['ie_prioridade'] == prioridade_selecionada]
            
            if df_filtrado.empty:
                st.warning("Nenhuma Ordem de Servi√ßo encontrada com os filtros aplicados. Tente ajustar os filtros.")
                time.sleep(30)
                continue
            
            # --- √Årea de Conte√∫do Principal ---
            st.header("Resumo Geral das Ordens de Servi√ßo Filtradas")
            col1, col2, col3, col4 = st.columns(4) # Cria 4 colunas para os cards de resumo
            
            with col1:
                st.metric("Total de OS", len(df_filtrado))
            with col2:
                concluidas = len(df_filtrado[df_filtrado['status'] == 'Conclu√≠da'])
                st.metric("Conclu√≠das", concluidas)
            with col3:
                em_andamento = len(df_filtrado[df_filtrado['status'] == 'Em andamento'])
                st.metric("Em andamento", em_andamento)
            with col4:
                em_aberto = len(df_filtrado[df_filtrado['status'] == 'Em aberto'])
                st.metric("Em aberto", em_aberto)
            
            st.markdown("---")

            # Exibe o conte√∫do da visualiza√ß√£o selecionada
            st.header(f"Visualiza√ß√£o: {st.session_state.selected_view}")

            if st.session_state.selected_view == "Status e Prioridade":
                col1, col2 = st.columns(2)
                with col1:
                    st.write("#### Distribui√ß√£o de OS por Status")
                    status_counts = df_filtrado['status'].value_counts().reset_index()
                    status_counts.columns = ['Status', 'Quantidade']
                    fig = px.pie(status_counts, values='Quantidade', names='Status', title='Distribui√ß√£o por Status',
                                 color='Status', color_discrete_map={'Conclu√≠da': '#00CC96', 'Em andamento': '#FFA15A', 'Em aberto': '#EF553B'})
                    fig.update_traces(textposition='inside', textinfo='percent+label', marker=dict(line=dict(color='#000000', width=1)))
                    st.plotly_chart(fig, use_container_width=True)
                with col2:
                    st.write("#### Quantidade de OS por Prioridade e Status")
                    prioridade_counts = df_filtrado.groupby(['ie_prioridade', 'status']).size().reset_index(name='Quantidade')
                    fig = px.bar(prioridade_counts, x='ie_prioridade', y='Quantidade', color='status', barmode='group',
                                 title='Distribui√ß√£o por Prioridade e Status', labels={'ie_prioridade': 'Prioridade', 'Quantidade': 'Quantidade de OS'},
                                 color_discrete_map={'Conclu√≠da': '#00CC96', 'Em andamento': '#FFA15A', 'Em aberto': '#EF553B'})
                    fig.update_layout(xaxis_title="Prioridade", yaxis_title="Quantidade de OS")
                    st.plotly_chart(fig, use_container_width=True)
            
            elif st.session_state.selected_view == "Tempo de Atendimento":
                col1, col2 = st.columns(2)
                with col1:
                    st.write("#### Tempo M√©dio de Atendimento por Prioridade")
                    df_concluidas = df_filtrado[df_filtrado['status'] == 'Conclu√≠da']
                    tempo_medio = df_concluidas.groupby('ie_prioridade')['tempo_atendimento'].mean().reset_index()
                    tempo_medio = tempo_medio.sort_values('tempo_atendimento', ascending=False)
                    if not tempo_medio.empty:
                        fig = px.bar(tempo_medio, x='ie_prioridade', y='tempo_atendimento', title='Tempo M√©dio de Atendimento por Prioridade (dias)',
                                     labels={'ie_prioridade': 'Prioridade', 'tempo_atendimento': 'Tempo (dias)'}, color='tempo_atendimento',
                                     color_continuous_scale=px.colors.sequential.Viridis)
                        fig.update_layout(xaxis_title="Prioridade", yaxis_title="Tempo M√©dio (dias)")
                        st.plotly_chart(fig, use_container_width=True)
                    else: st.info("N√£o h√° Ordens de Servi√ßo Conclu√≠das no per√≠odo selecionado.")
                with col2:
                    st.write("#### Tempo M√©dio de Espera para In√≠cio por Prioridade")
                    df_iniciadas = df_filtrado[df_filtrado['status'].isin(['Em andamento', 'Conclu√≠da'])]
                    tempo_espera = df_iniciadas.groupby('ie_prioridade')['tempo_espera'].mean().reset_index()
                    tempo_espera = tempo_espera.sort_values('tempo_espera', ascending=False)
                    if not tempo_espera.empty:
                        fig = px.bar(tempo_espera, x='ie_prioridade', y='tempo_espera', title='Tempo M√©dio de Espera por Prioridade (dias)',
                                     labels={'ie_prioridade': 'Prioridade', 'tempo_espera': 'Tempo (dias)'}, color='tempo_espera',
                                     color_continuous_scale=px.colors.sequential.Viridis)
                        fig.update_layout(xaxis_title="Prioridade", yaxis_title="Tempo M√©dio (dias)")
                        st.plotly_chart(fig, use_container_width=True)
                    else: st.info("N√£o h√° Ordens de Servi√ßo que iniciaram no per√≠odo selecionado.")
            
            elif st.session_state.selected_view == "Solicitantes":
                st.write("#### Top 10 Solicitantes com Mais Ordens de Servi√ßo")
                top_solicitantes = df_filtrado['nm_solicitante'].value_counts().reset_index()
                top_solicitantes.columns = ['Solicitante', 'Quantidade']
                top_solicitantes = top_solicitantes.head(10)
                if not top_solicitantes.empty:
                    fig = px.bar(top_solicitantes, x='Quantidade', y='Solicitante', title='Top 10 Solicitantes',
                                 orientation='h', color='Quantidade', color_continuous_scale=px.colors.sequential.Viridis)
                    fig.update_layout(yaxis={'categoryorder':'total ascending'})
                    st.plotly_chart(fig, use_container_width=True)
                else: st.info("N√£o h√° solicitantes com Ordens de Servi√ßo no per√≠odo selecionado.")

            elif st.session_state.selected_view == "Painel de Acompanhamento": # Chama a fun√ß√£o dedicada para a nova aba
                exibir_painel_acompanhamento(df_filtrado)
            
            st.markdown("---") # Separador visual para as se√ß√µes abaixo que n√£o s√£o controladas por abas

            # Linha do tempo das OS criadas (essas se√ß√µes s√£o sempre mostradas abaixo da visualiza√ß√£o selecionada)
            st.header("Evolu√ß√£o Mensal das Ordens de Servi√ßo por Status")
            st.write("Este gr√°fico mostra como o n√∫mero de Ordens de Servi√ßo em diferentes status (Conclu√≠das, Em Andamento, Em Aberto) evoluiu ao longo do tempo, com base na data de cria√ß√£o.")
            
            df_timeline = df_filtrado.copy()
            df_timeline['mes_ano'] = df_timeline['dt_criacao'].dt.strftime('%Y-%m')
            timeline_data = df_timeline.groupby(['mes_ano', 'status']).size().reset_index(name='quantidade')
            timeline_data['mes_ano_dt'] = pd.to_datetime(timeline_data['mes_ano'] + '-01')
            timeline_data = timeline_data.sort_values('mes_ano_dt')
            
            if not timeline_data.empty:
                fig = px.line(timeline_data, x='mes_ano', y='quantidade', color='status', title='Evolu√ß√£o de OS por M√™s',
                              labels={'mes_ano': 'M√™s/Ano', 'quantidade': 'Quantidade de OS'}, markers=True,
                              color_discrete_map={'Conclu√≠da': '#00CC96', 'Em andamento': '#FFA15A', 'Em aberto': '#EF553B'})
                fig.update_layout(xaxis_title="M√™s/Ano", yaxis_title="Quantidade de OS")
                st.plotly_chart(fig, use_container_width=True)
            else: st.info("N√£o h√° dados de linha do tempo para exibir com os filtros atuais.")
            
            st.markdown("---") 

            # Tabela de detalhamento das Ordens de Servi√ßo
            st.header("Detalhamento das Ordens de Servi√ßo Filtradas")
            st.write("Visualize todas as Ordens de Servi√ßo que correspondem aos filtros selecionados, com informa√ß√µes detalhadas para cada uma.")
            
            colunas_exibir = ['nr_os', 'ds_solicitacao', 'nm_solicitante', 'ie_prioridade', 
                              'dt_criacao', 'dt_inicio', 'dt_termino', 'nm_responsavel', 'status']
            colunas_existentes = [col for col in colunas_exibir if col in df_filtrado.columns]
            df_exibir = df_filtrado[colunas_existentes].copy()
            
            colunas_renomeadas = {
                'nr_os': 'N¬∫ OS', 'ds_solicitacao': 'Solicita√ß√£o', 'nm_solicitante': 'Solicitante',
                'ie_prioridade': 'Prioridade', 'dt_criacao': 'Data Cria√ß√£o', 'dt_inicio': 'Data In√≠cio',
                'dt_termino': 'Data T√©rmino', 'nm_responsavel': 'Respons√°vel', 'status': 'Status'
            }
            renomeacao = {k: v for k, v in colunas_renomeadas.items() if k in df_exibir.columns}
            df_exibir = df_exibir.rename(columns=renomeacao)
            
            for col in ['Data Cria√ß√£o', 'Data In√≠cio', 'Data T√©rmino']:
                if col in df_exibir.columns and df_exibir[col].dtype.kind == 'M': 
                    df_exibir[col] = df_exibir[col].dt.strftime('%d/%m/%Y %H:%M').fillna('N/A')
            
            st.dataframe(df_exibir) # use_container_width removido para compatibilidade
            
            st.markdown("---") 

            # Detalhes de uma Ordem de Servi√ßo selecionada
            st.header("Detalhes da Ordem de Servi√ßo Selecionada")
            st.write("Selecione uma Ordem de Servi√ßo para ver todos os detalhes, incluindo descri√ß√µes completas e tempos calculados.")
            
            if 'nr_os' in df_filtrado.columns and not df_filtrado['nr_os'].empty:
                os_selecionada_nr = st.selectbox("Selecione o N√∫mero da OS para ver detalhes:", sorted(df_filtrado['nr_os'].unique().tolist()))
                if os_selecionada_nr:
                    os_detalhes = df_filtrado[df_filtrado['nr_os'] == os_selecionada_nr].iloc[0]
                    col_left, col_right = st.columns(2)
                    with col_left:
                        st.subheader(f"OS #{os_detalhes['nr_os']}")
                        st.write(f"**Solicita√ß√£o:** {os_detalhes['ds_solicitacao'] if pd.notna(os_detalhes['ds_solicitacao']) else 'N/A'}")
                        st.write(f"**Solicitante:** {os_detalhes['nm_solicitante'] if pd.notna(os_detalhes['nm_solicitante']) else 'N/A'}")
                        st.write(f"**Prioridade:** {os_detalhes['ie_prioridade'] if pd.notna(os_detalhes['ie_prioridade']) else 'N/A'}")
                        st.write(f"**Status:** {os_detalhes['status'] if pd.notna(os_detalhes['status']) else 'N/A'}")
                    with col_right:
                        st.write(f"**Data de Cria√ß√£o:** {os_detalhes['dt_criacao'].strftime('%d/%m/%Y %H:%M') if pd.notna(os_detalhes['dt_criacao']) else 'N/A'}")
                        st.write(f"**Data de In√≠cio:** {os_detalhes['dt_inicio'].strftime('%d/%m/%Y %H:%M') if pd.notna(os_detalhes['dt_inicio']) else 'N/A'}")
                        st.write(f"**Data de T√©rmino:** {os_detalhes['dt_termino'].strftime('%d/%m/%Y %H:%M') if pd.notna(os_detalhes['dt_termino']) else 'N/A'}")
                        st.write(f"**Respons√°vel:** {os_detalhes['nm_responsavel'] if pd.notna(os_detalhes['nm_responsavel']) else 'N/A'}")
                        st.write(f"**√öltima Atualiza√ß√£o:** {os_detalhes['dt_ultima_atualizacao'].strftime('%d/%m/%Y %H:%M') if pd.notna(os_detalhes['dt_ultima_atualizacao']) else 'N/A'}")
                    
                    if 'ds_completa_servico' in os_detalhes and pd.notna(os_detalhes['ds_completa_servico']):
                        st.subheader("Descri√ß√£o Completa da Ordem de Servi√ßo")
                        st.write(os_detalhes['ds_completa_servico'])
                    else: st.subheader("Descri√ß√£o Completa da Ordem de Servi√ßo"); st.info("Sem descri√ß√£o detalhada dispon√≠vel para esta OS.")
                    
                    st.subheader("M√©tricas de Tempo da OS")
                    if pd.notna(os_detalhes['dt_criacao']) and pd.notna(os_detalhes['dt_inicio']):
                        tempo_espera = (os_detalhes['dt_inicio'] - os_detalhes['dt_criacao']).total_seconds() / (24*60*60)
                        st.write(f"**Tempo de espera para in√≠cio:** {tempo_espera:.2f} dias")
                    else: st.write("**Tempo de espera para in√≠cio:** N/A (OS n√£o iniciada ou sem data de cria√ß√£o/in√≠cio)")
                    if pd.notna(os_detalhes['dt_criacao']) and pd.notna(os_detalhes['dt_termino']):
                        tempo_total = (os_detalhes['dt_termino'] - os_detalhes['dt_criacao']).total_seconds() / (24*60*60)
                        st.write(f"**Tempo total de atendimento:** {tempo_total:.2f} dias")
                    else: st.write("**Tempo total de atendimento:** N/A (OS n√£o conclu√≠da ou sem data de cria√ß√£o/t√©rmino)")
            else: st.info("Nenhuma Ordem de Servi√ßo dispon√≠vel para sele√ß√£o ou a coluna 'nr_os' n√£o foi encontrada.")
        
        # Pausa o script por 30 segundos antes da pr√≥xima re-execu√ß√£o completa
        time.sleep(30) 

# Ponto de entrada da aplica√ß√£o Streamlit
if __name__ == "__main__":
    main()
